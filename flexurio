#!/usr/bin/env bash
echo " ----------------------------------------------------------------------------------"
echo " |     ___________     __________    _______    ___________     __    ______      |"
echo " |    |   ______  |   |   ____   \  /  ___  |  |  ___   _  \   |  |  /  __  \     |"
echo " |    |  |__   |  |   |  |__   \  \/  /  |  |  |  | |  |_)  |  |  | |  |  |  |    |"
echo " |    |   __|  |  |   |   __|   >    <   |  |  |  | |      /   |  | |  |  |  |    |"
echo " |    |  |     |   ----  |____ /  /\  \  |   --   | |  |\  \   |  | |   --   |    |"
echo " |    |__|     |_________________/  \__\ |_______/  |__| \__\  |__|  \______/     |"
echo " |                                                                                |"
echo " |                         Ease in generating code for your App                   |"
echo " |                                 Version : 1.0.1 Beta                           |"
echo " |                                 Code Name : Exoplanet                          |"
echo " ----------------------------------------------------------------------------------"

LOKASINIPUN=$PWD
if [ "$1" == "version" ]; then
        echo "FLEXURIO Version 1.0.0 / Code Name : Exoplanet";
elif [ "$1" == "nodeversion" ]; then
    if ! hash meteor 2>/dev/null ; then
        echo "meteor not found";
        exit 1;
    fi;

    BASE_PATH="$HOME/.meteor/packages/meteor-tool";
    NODE_PATH="dev_bundle/bin";

    line=$(meteor show meteor-tool | grep meteor-tool@);
    TOOL=$(sed -e 's#.*@\(\)#\1#' <<< $line);

    PLATFORM_OLD="meteor-tool-$(meteor --arch)";
    PLATFORM_NEW="mt-$(meteor --arch)";

    PROJECT_NODE_VERSION_PATH_OLD="$BASE_PATH/$TOOL/$PLATFORM_OLD/$NODE_PATH"; # OLD meteor versions
    PROJECT_NODE_VERSION_PATH_NEW="$BASE_PATH/$TOOL/$PLATFORM_NEW/$NODE_PATH"; # NEW meteor versions

    if [ -d "$PROJECT_NODE_VERSION_PATH_OLD" ]; then
        PROJECT_NODE_VERSION_PATH=$PROJECT_NODE_VERSION_PATH_OLD;
    fi

    if [ -d "$PROJECT_NODE_VERSION_PATH_NEW" ]; then
        PROJECT_NODE_VERSION_PATH=$PROJECT_NODE_VERSION_PATH_NEW;
    fi

    if [ -n "$PROJECT_NODE_VERSION_PATH" ]; then
        if [ -x "$PROJECT_NODE_VERSION_PATH/node" ]; then
            $PROJECT_NODE_VERSION_PATH/node -v;
            exit 0;
        fi
    fi

    echo "node version not found"
    exit 1;


elif [ "$1" == "desktop-enable" ]; then
    echo " Flexurio adding electron to your app. . . "
    echo " "
    echo " Installing electron use npm, so please kake sure you have nodejs & NPM, on Debian you can install with "
    echo " apt-get install nodejs nodejs-legacy npm "

    echo " "

    sudo npm install -g electrify && cd "$LOKASINIPUN/FLEXURIO-CORE/" && meteor add  arboleya:electrify
elif [ "$1" == "desktop-run" ]; then
    echo " Flexurio run local development and desktop app that pair to localhost. . . "
    [ cd "$LOKASINIPUN/FLEXURIO-CORE/" && electrify ] || [ echo "You're not in a Flexurio project directory." ]
elif [ "$1" == "desktop-build" ]; then
    echo " Flexurio build desktop app for this OS. . . "
    [ cp -R FLEXURIO-DESKTOP/* FLEXURIO-CORE/.electrify/ && cd "$LOKASINIPUN/FLEXURIO-CORE/" && electrify package -o ../BUILD/ ] || [ echo "You're not in a Flexurio project directory." ]

elif [ "$1" == "server-remove" ]; then
   if [ "$2" == "" ]; then
      echo " Please write specific package that you want to delete. . . "
   else
      echo " remove package name '"$2"' to your server app . . . "
      cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
      meteor remove $2
   fi
elif [ "$1" == "engine-build" ]; then
    echo ""

elif [ "$1" == "server-deploy" ]; then
   if [[ $2 = *[!\ ]* ]]; then
       if [[ $3 = *[!\ ]* ]]; then
            echo -n "Is Container Flexurio stoped (y/n)? "
            read answer
            if echo "$answer" | grep -iq "^y" ;then
                  echo " Deploying Flexurio To $2 at $3 . . . "
                  sLOKASI="$2:$3"
                  scp ../BUILD/FLEXURIO-CORE.tar.gz $sLOKASI
            else
                  exit
            fi
       else
          echo " Please input FOLDER in SERVER"
       fi
   else
      echo " Please Input user@IP SSH"
   fi
elif [ "$1" == "server-build" ]; then
   if [[ $2 = *[!\ ]* ]]; then
       if [[ $3 = *[!\ ]* ]]; then
          echo " Build Flexurio for $2 at $3 . . . "
          cd "$LOKASINIPUN/FLEXURIO-CORE/" && meteor build --architecture=$2 ../BUILD --server=$3
       else
          echo " Please Input IP:PORT"
       fi
   else
      echo " OS ARCHITECTURE -- NOT SPECIFIED "
      echo " Please use one of the following : "
      echo " 1. os.osx.x86_64 "
      echo " 2. os.linux.x86_64 "
      echo " 3. os.linux.x86_32 "
   fi
elif [ "$1" == "server-add" ]; then
   if [ "$2" == "" ]; then
      echo " Flexurio adding minimal package content to server side. . . "
      cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
      meteor add session && \
      meteor add accounts-base && \
      meteor add accounts-password  && \
      meteor add accounts-twitter && \
      meteor add accounts-facebook && \
      meteor add accounts-google && \
      meteor add alanning:roles && \
      echo "Setting Up Flexurio Offline Mode . . ." && \
      meteor add appcache && \
      meteor add ground:db && \
      meteor add blaze-html-templates && \
      meteor add check && \
      meteor add ejson && \
      meteor add eluck:accounts-lockout && \
      echo "Setting Up Bootstrap Material Design . . ." && \
      meteor add fezvrasta:bootstrap-material-design && \
      meteor add iron:router && \
      echo "Setting Up Flexurio REST API Server . . ." && \
      echo "Setting Up Flash message design . . ." && \
      meteor add mrt:flash-messages && \
      echo "Setting Up Flexurio Developer Tools Query Mongo . . ." && \
      meteor add msavin:mongol && \
      echo "Setting Up Flexurio Upload Image . . ." && \
      meteor add momentjs:moment && \
      meteor add ongoworks:pdf && \
      meteor add sergeyt:typeahead && \
      echo "Remove autopublish . . ." && \
      meteor remove autopublish
   else
      echo " add package name '"$2"' to your server app . . . "
      cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
      meteor add $2
   fi
elif [ "$1" == "server-install" ]; then
   echo " Installing Flexurio Framework on server side . . . "
   echo " Flexurio is framework that create by Y.N Pamungkas Jayuda Copyright (c) 2015 Thinkbuntu Indonesia "
   echo " By install and using a free development of flexurio framework, you accept and agree to our terms and conditions ( See detail licence agreement ). This framework base on node, mongodb, osm, leaf.js, meteor, mongol, etc "
   echo " Thanks for helping us with information about bug and improve idea.  "
   echo " Matur Sembah Nuwun, Jayalah Indonesia, GBU"
   cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
   sudo curl https://install.meteor.com/ | sh
elif [ "$1" == "mobile-install" ]; then
   echo " Installing Mobile Flexurio Framework . . . "
   echo " Flexurio is framework that create by Y.N Pamungkas Jayuda Copyright (c) 2015 Thinkbuntu Indonesia "
   echo " By install and using a free development of flexurio framework, you accept and agree to our terms and conditions ( See detail licence agreement ). This framework base on node, mongodb, osm, leaf.js, meteor, mongol, etc "
   echo " Thanks for helping us with information about bug and improve idea.  "
   echo " Matur Sembah Nuwun, Jayalah Indonesia, GBU"
   cd FLEXURIO-MOBILE && \
   sudo npm install -g react-native-cli && \
   npm install

elif [ "$1" == "mobile-avd" ]; then
    if [[ $2 = "--list" ]]; then
        echo " Opening Android Virtual Device . . . "
        android avd
    elif [[ $2 = "--install" ]]; then
        echo " Opening Android SDK Manager . . . "
        android
    elif [[ $2 = "--run" ]]; then
        if [[ $3 = *[!\ ]* ]]; then
            echo " Run AVD $3 . . . "
            emulator -avd $3
        else
            echo " Please write specific AVD Name . . . "
            echo " Ex : ./flexurio.sh mobile-AVD --run NEXUS "
        fi
    else
        echo " Please write specific AVD Options . . . "
        echo " --list           : List of all Android Virtual Device "
        echo " --install        : Open SDK Manager to install library AVD "
        echo " --run [AVD Name] : Open and run Android Virtual Device "
    fi
elif [ "$1" == "server-reset" ]; then
   echo " Reset Flexurio server to official factory data. . . "
   cd "$LOKASINIPUN/FLEXURIO-CORE/" && meteor reset
elif [ "$1" == "server-run" ]; then
   echo " Starting Flexurio server . . . "
   cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
   meteor
elif [ "$1" == "server-runProductions" ]; then
    if [[ $2 = *[!\ ]* ]]; then
        if [[ $3 = *[!\ ]* ]]; then
           echo " Starting Flexurio server with Production MONGODB . . . "
           cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
            MONGO_URL=mongodb://$2/$3 meteor
        else
            echo " Please Input DATABASE, Ex : ./flexurio server-runProductions localhost:10010 admin "
        fi
    else
        echo " Please Input IP:PORT DATABASE, Ex : ./flexurio server-runProductions localhost:10010 admin "
    fi
elif [ "$1" == "mobile-run" ]; then
   if [ "$2" == "android" ]; then
      cd FLEXURIO-MOBILE && \
      react-native run-android
   else
      cd FLEXURIO-MOBILE && \
      react-native run-ios
   fi
elif [ "$1" == "mobile-generate" ]; then
    cd FLEXURIO-MOBILE && \
    react-native upgrade
elif [ "$1" == "mobile-packager" ]; then
    cd FLEXURIO-MOBILE && \
    npm start
elif [ "$1" == "server-update" ]; then
   if [ "$2" == "" ]; then
      echo " Update Latest Flexurio server to stable release . . . "
      cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
      meteor update
   else
      if ["$2" == "--all-packages"]; then
         echo " Updating all package on server . . . "
         cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
         meteoer update --all-packages
      else
         echo " Updating package on server " $2 " . . . "
         cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
         meteor update $2
      fi
   fi
elif [ "$1" == "mobile-list" ]; then
   echo " List all Nativescript package on your mobile app .... "
   cd FLEXURIO-MOBILE && \
   tns plugin
elif [ "$1" == "server-list" ]; then
   echo " List all package on your server app .... "
   cd "$LOKASINIPUN/FLEXURIO-CORE/" && \
   meteor list
elif [ "$1" == "server-newmodule" ]; then
   if [ "$2" == "" ]; then
      echo " Please write folder locations . . . "
   elif [ "$3" == "" ]; then
      echo " Please write appname . . . "
   else
      sDatabase=$(echo $3 | tr 'a-z' 'A-Z')
      sDatabaseL=$(echo "$sDatabase" | tr '[:upper:]' '[:lower:]')
      sDatabaseInput="$sDatabase DocInput"
      sDatabaseInput="${sDatabaseInput/ /}"
      sDatabaseLs="$sDatabaseL s"
      sDatabaseLs="${sDatabaseLs/ /}"


      sKK=$'"'
      sNew=$""
      sEdit=$""
      sKolomNew=$""
      sKolomEdit=$""
      sCekAda=$""
      sCekAdaData=$""
      sCekEdit=$""
      sCekEditData=$""

      sHTMLDisplay=$""
      sHTMLEdit=$""
      sHTMLNew=$""

      sFILTER=$""

      GQL_TYPEDATA=$""

      GQL_sCONNECTOR=$"
        import mongoose from 'mongoose';
        const schema = {

      "

      GQL_sRESOLVER=$"
            import $sDatabase from './connector';

            const resolvers = {
              Query: {
                $sDatabaseLs(root, {query}, context){
                  const selector = (query && query.selector) || {};
                  const options = (query && query.options) || {};

                  const $sDatabaseLs = $sDatabase.find(selector);

                  if(options){
                    const {limit, skip, sort} = options;
                    if(limit)
                      $sDatabaseLs.limit(limit);

                    if(skip)
                      $sDatabaseLs.skip(skip);

                    if(sort)
                      $sDatabaseLs.sort(sort);
                  }

                  return $sDatabaseLs;
                }
              },
              Mutation: {
                create$sDatabase(_, {doc}){
                  let $sDatabaseL = new $sDatabase(doc);
                  $sDatabaseL.save();

                  return $sDatabaseL;
                },
                update$sDatabase(_, {query, doc}){
                  const $sDatabaseL = $sDatabase.update(query.selector, {\$set: doc});
                  return $sDatabaseL;
                }
              }
            }

            export default resolvers;
      "


      declare -i i=0
      while : ;
      do
         i=$(( i + 1 ))
         read -e -p "Please input name of column number - $i (* type DONE if all columns are already write off ) :" NAMAKOLOM

         namakolomU=$(echo $NAMAKOLOM | tr 'a-z' 'A-Z')
         namakolomL=$(echo "$NAMAKOLOM" | tr '[:upper:]' '[:lower:]')

         if [[ $NAMAKOLOM == "DONE" ]] ; then
             echo "Process $i column for $3";
             GQL_sCONNECTOR="$GQL_sCONNECTOR $GQL_TYPEDATA };
                    const $sDatabase = mongoose.model('$sDatabase', schema);
                    export default $sDatabase;
             "

             GQL_sSCHEMA="
                const $sDatabase = \`

                  # Main Schema
                  type $sDatabase {
                    $GQL_TYPEDATA
                  }

                  # Schema for input to $sDatabase
                  input $sDatabaseInput {
                    $GQL_TYPEDATA
                  }
                \`;

                export default $sDatabase;
             "
             break
         else
             if [[ $i>1 ]] ; then
                 GQL_TYPEDATA="$GQL_TYPEDATA ,"
             fi

             read -e -p "Please input data type for column number - $i [ $NAMAKOLOM ] : " TYPEDATA
             GQL_TYPEDATA="$GQL_TYPEDATA $namakolomL:$TYPEDATA"

         fi


         sNamaNew=$namakolomL$sDatabase
         sNamaNewKK=$sKK$sNamaNew$sKK
         sNamaEdit=$namakolomL$"Edit"$sDatabase
         sNamaEditKK=$sKK$sNamaEdit$sKK

         sFILTER=$sFILTER$"
         {$namakolomL: { \$regex : new RegExp(textSearch, 'i') }},
         "

         sNew=$sNew$"
         let $sNamaNew = tpl.\$('input[name=$sNamaNewKK]').val();
         "

         sEdit=$sEdit$"
         let $sNamaEdit = tpl.\$('input[name=$sNamaEditKK]').val();
         "

         sCekAda=$sCekAda$"!adaDATA($sNamaNew) | "
         sCekEdit=$sCekEdit$"!adaDATA($sNamaEdit) | "

         sKolomNew=$sKolomNew$"
         $namakolomL: $sNamaNew,
         "

         sKolomEdit=$sKolomEdit$"
         $namakolomL: $sNamaEdit,
         "

         sHTMLDisplay=$sHTMLDisplay$" {{$namakolomL}} - "

         sHTMLEdit=$sHTMLEdit$"

         <div class='form-group label-floating has-info col-md-6'>
         <label for='$sNamaEdit' class='control-label'>$namakolomU $sDatabase</label>
         <input name='$sNamaEdit' id='$sNamaEdit' type='text' class='form-control' style='font-size:larger;' value='{{$namakolomL}}'>
         </div>

         "

         sHTMLNew=$sHTMLNew$"

         <div class='form-group label-floating has-info col-md-6'>
         <label for='$sNamaNew' class='control-label'>$namakolomU $sDatabase</label>
         <input name='$sNamaNew' id='$sNamaNew' type='text' class='form-control' style='font-size:larger;'>
         </div>

         "


      done

      sHTMLDisplayView=$(sed 's/.\{2\}$//' <<< "$sHTMLDisplay")
      sCekAdaData=$(sed 's/.\{2\}$//' <<< "$sCekAda")
      sCekEditData=$(sed 's/.\{2\}$//' <<< "$sCekEdit")



      [ -d "FLEXURIO-CORE/client/views/$2" ] || mkdir "FLEXURIO-CORE/client/views/$2"

      sDATE=`date`
      sBY=`uname -a`
      sUSER=`whoami`

      sFLX=$"
          /**
          * Generated from flexurio tools at $sDATE
          * By $sUSER at $sBY
          */

      import { Template } from 'meteor/templating';
      import { Session } from 'meteor/session';
      import './$3.html';

      Template.$3.created = function () {
         Session.set('limit', 50);
         Session.set('oFILTERS', {});
         Session.set('oOPTIONS', {});
         Session.set('textSearch', '');
         Session.set('namaHeader', 'DATA $sDatabase');
         Session.set('dataDelete', '');
         Session.set('isCreating', false);
         Session.set('isDeleting', false);

         this.autorun(function () {
                subscribtion('$3', Session.get('oFILTERS'), Session.get('oOPTIONS'), Session.get('limit'));
         });
       };

        Template.$3.onRendered(function () {
            ScrollHandler();
        });

        Template.$3.helpers({
            isLockMenu: function () {
                return isLockMenu();
            },

            isActionADD: function () {
                return isAdminActions(Session.get('sURLMenu'), 'ADD');
            },

            isActionEDIT: function () {
                return isAdminActions(Session.get('sURLMenu'), 'EDIT');
            },

            isActionDELETE: function () {
                return isAdminActions(Session.get('sURLMenu'), 'DELETE');
            },

            isActionPRINT: function () {
                return isAdminActions(Session.get('sURLMenu'), 'PRINT');
            },

        isLockMenu:function () {
            if(Session.get('lockMenu')){
                return 'col-md-9 col-md-offset-3';
            } else {
                return '';
            };
        },
         sTinggiPopUp: function () {
            return 0.6*(\$(window).height());
         },
         isEditing: function() {
            return Session.get('idEditing') == this._id;
         },
         isDeleting: function() {
            return Session.get('isDeleting');
         },
         isCreating: function() {
            return Session.get('isCreating');
         },
         $3s: function() {
            let textSearch = '';
            if(adaDATA(Session.get('textSearch'))) {
               textSearch = Session.get('textSearch').replace('#', '').trim();
            }

            let oOPTIONS = {
               sort: {createAt: -1},
               limit: Session.get('limit')
            }

            let oFILTERS = {
               aktifYN: 1,
               \$or: [
               $sFILTER
               {_id: { \$regex : new RegExp(textSearch, 'i') }},
               ]
            }

            return $sDatabase.find(
                oFILTERS,
                oOPTIONS
            );
         }
      });

      Template.$3.events({
         'click a.cancel': function(e, tpl){
            e.preventDefault();
            Session.set('isCreating', false);
            Session.set('isEditing', false);
            Session.set('idEditing', '');
            Session.set('isDeleting', false);
         },

         'click a.deleteDataOK': function(e, tpl){
            e.preventDefault();
            delete$sDatabase();
            FlashMessages.sendWarning('Attention, ' + Session.get('dataDelete') + ' successfully DELETE !');
            Session.set('isDeleting', false);
         },
         'click a.deleteData': function(e, tpl){
            e.preventDefault();
            $("html, body").animate({
                scrollTop: 0
            }, 600);

            Session.set('isDeleting', true);
            Session.set('dataDelete', Session.get('namaHeader').toLowerCase() + ' ' + this.nama$sDatabase);
            Session.set('idDeleting', this._id);
         },

         'click a.create': function(e, tpl){
            e.preventDefault();
            $("html, body").animate({
                scrollTop: 0
            }, 600);

            Session.set('isCreating', true);
         },
         'keyup #nama$sDatabase': function (e, tpl) {
            e.preventDefault();
            if (e.keyCode == 13) {
               insert$sDatabase(tpl);
            }
         },
         'click a.save': function(e, tpl){
            e.preventDefault();
            insert$sDatabase(tpl);
         },

         'click a.editData': function(e, tpl){
            e.preventDefault();
            $("html, body").animate({
                scrollTop: 0
            }, 600);

            Session.set('idEditing', this._id);
            Session.set('isEditing', true);
         },
         'keyup #namaEdit$sDatabase': function (e, tpl) {
            e.preventDefault();
            if (e.keyCode == 13) {
               update$sDatabase(tpl);
            }
         },
         'click a.saveEDIT': function(e, tpl){
            e.preventDefault();
            update$sDatabase(tpl);
         },
         'submit form.form-comments': function (e, tpl) {
            e.preventDefault();
            flxcomments(e,tpl,$sDatabase);
        }

      });


      insert$sDatabase = function (tpl) {

         $sNew

         if($sCekAdaData) {
            FlashMessages.sendWarning('Please complete all of the data to be . . .');
            return;
         }

         $sDatabase.insert(
         {
            $sKolomNew
            aktifYN: 1,
            createByID: userid(),
            createBy:username(),
            createAt: new Date()
         },
         function (err, id) {
            if(err) {
               FlashMessages.sendWarning('Sorry, Data could not be saved - Please repeat again.');
            } else {
               Session.set('isCreating', false);
               FlashMessages.sendSuccess('Thanks, your data is successfully saved');
            }
         }
         );
      };


      update$sDatabase = function (tpl) {

         $sEdit

         if($sCekEditData) {
            FlashMessages.sendWarning('Please complete all of the data to be . . .');
            return;
         }

         $sDatabase.update({_id:Session.get('idEditing')},
         { \$set:{
            $sKolomEdit
            updateByID: userid(),
            updateBy:username(),
            updateAt: new Date()
         }
      },
      function (err, id) {
         if(err) {
            FlashMessages.sendWarning('Sorry, Data could not be saved - Please repeat again.');
         } else {
            Session.set('idEditing', '');
            Session.set('isEditing', false);
            FlashMessages.sendSuccess('Thanks, your data is successfully saved');
         }
      }
      );
   };

   delete$sDatabase = function () {

      if(!adaDATA(Session.get('idDeleting'))) {
         FlashMessages.sendWarning('Please select data that you want to remove . . .');
         return;
      }

      $sDatabase.update({_id:Session.get('idDeleting')},
          { \$set:{
             aktifYN: 0,
             deleteByID: userid(),
             deleteBy:username(),
             deleteAt: new Date()
          }
       },
       function (err, id) {
          if(err) {
             FlashMessages.sendWarning('Sorry, Data could not be saved - Please repeat again.');
          } else {
             Session.set('idEditing', '');
             FlashMessages.sendSuccess('Thanks, your data is successfully saved');
          }
       }
       );
    };


    "

    echo "$sFLX" >  "FLEXURIO-CORE/client/views/$2/$3.js"
    echo "JS bootstraping success created . . . "

    sFLXHTML=$"
    <!-- Generated from flexurio tools -->
    <!-- Flexurio By Pamungkas Jayuda yulius.jayuda@gmail.com / +628119003077 -->

    <template name='$3'>
       <div class='container-fluid app'>
          {{>utama}}
          {{>menuSearch}}
          {{#if isActionADD}}
             {{>menuAdd}}
          {{/if}}

          <div class='row main {{isLockMenu}} animasiAtas'>

             <!-- HEADER LISTVIEW -->
             <div class='list-group panel panel-default headerApp'>
                {{>headerListview}}

                {{#each $3s}}
                   <div class='list-group-item'>
                      <div class='row-content'>
                         <BR>
                         <p>
                         $sHTMLDisplay
                         </p>

                            <div class='least-content' style='top:20px;'>
                               {{>actionListview}}
                            </div>
                      </div>
                   </div>

                    {{>flxcomments isCommentOpen=false _id=_id comments=comments}}

                   {{#if isEditing}}
                      {{>blockModals}}
                      <div class='container animasiAtas' style='position:fixed;top:10%;left:10%;width:80%;z-index:10001;'>
                         <div class='col-md-12' style='height:auto;max-height:{{sTinggiPopUp}}px;overflow-y:scroll;'>
                         $sHTMLEdit
                         </div>

                         <div class='pull-right'>
                         <a class='saveEDIT btn btn-primary' style='background-color:green;color:white;'>SAVE</a>
                         </div>
                      </div>
                   {{/if}}
                {{/each}}
             </div>
             {{>menuLoadMore}}
          </div>

          {{#if isCreating}}
             {{>blockModals}}
             <div class='container animasiAtas' style='position:fixed;top:10%;left:10%;width:80%;z-index:10001;'>
                <div class='col-md-12' style='height:auto;max-height:{{sTinggiPopUp}}px;overflow-y:scroll;'>
                $sHTMLNew
                </div>

                <div class='pull-right'>
                   <a class='save btn btn-primary' style='background-color:green;color:white;'>SAVE</a>
                </div>
             </div>
          {{/if}}

          {{#if isDeleting}}
             {{>formDeleting}}
          {{/if}}
       </div>
    </template>

    "

    echo "$sFLXHTML" >  "FLEXURIO-CORE/client/views/$2/$3.html"
    echo "HTML bootstraping success created . . . "

    echo "$sDatabase = new Mongo.Collection('$3'); " > .temp
    cat .temp >> FLEXURIO-CORE/lib/collections.js
    echo "COLLECTIONS bootstraping success created . . . "

    echo "publishData('$3', $sDatabase, {}, {});" > .temp
    cat .temp >> FLEXURIO-CORE/server/publications.js
    echo "PUBLICATIONS bootstraping success created . . . "

    sAuthPub=$"
    $sDatabase.allow({
       'insert': function (userId, doc) {
          return true;
       },
       'remove': function (userId, doc) {
           if (Roles.userIsInRole(userId, ['root', 'administrator'])) {
               return true;
           } else {
               return false;
           }
       },
       'update': function (userId, doc, fieldNames, modifier) {
          return true;
       }
    });
    "
    echo "$sAuthPub" > .temp
    cat .temp >> "$LOKASINIPUN/FLEXURIO-CORE/server/publicationsAuth.js"
    echo "AUTH PUBLICATIONS bootstraping success created . . . "


    sROUT=$"
    Router.route('/$3', function () {
        Session.set('sURLMenu', '$3');
       this.render('$3');
    });
    "

    echo "$sROUT" > .temp
    cat .temp >> "$LOKASINIPUN/FLEXURIO-CORE/lib/router.js"
    echo "ROUTES bootstraping success created . . . "

fi
elif [ "$1" == "check" ]; then
    echo $LOKASINIPUN
elif [ "$1" == "init" ]; then
    python ~/.flexurio/flexurio_portal login ~/.flexurio/flexurio_config
elif [ "$1" == "--help" ] || [ "$1" == "" ]; then
   echo " Flexurio is tools to bootstraping node on server - desktop, also with react-native on mobile app. Please read "
   echo " this options carefully. Any question feel free to email us at yulius.jayuda@gmail.com or text at +628119003077. "
   echo " Mature Nuwun, GBU, Jayalah Indonesia "
   echo "  "
   echo " version                                  Version of Flexurio"
   echo " nodeversion                              Get Node Version that use in flexurio"
   echo " ------------------------------------------------------------------------------------------------------------- "
   echo "  "
   echo " SERVER OPTIONS : "
   echo "  "
   echo " init                                     Initialing User ID flexurio"
   echo " create [project name]                    Create new flexurio project"
   echo " check                                    Check configurations"
   echo "  "
   echo " ------------------------------------------------------------------------------------------------------------- "
   echo "  "
   echo " SERVER OPTIONS : "
   echo "  "
   echo " server-install                           Install framework that use at flexurio - base on node meteor "
   echo " server-add                               Add All minimum package that must have on flexurio"
   echo " server-add [package]                     Add package with specific name"
   echo " server-newmodule [foldername] [appname]  Create New Module with tamplate name appname at folder location foldername"
   echo " server-remove [package]                  Remove package with specific name"
   echo " server-run                               Run flexurio server - default at port 3000"
   echo " server-update                            Update all - Framework & Package that use in your app"
   echo " server-update --all-packages             Update all package dependency"
   echo " server-update [package]                  Update package with specific name"
   echo " server-list                              List all package on your app"
   echo " server-reset                             Back to factory data reset"
   echo " server-build [os] [ip:port]              Build flexurio to use in server ( Result FLEXURIO-CORE.tar.gz) "
   echo "  "
   echo " ------------------------------------------------------------------------------------------------------------- "
   echo "  "
   echo " MOBILE OPTIONS : "
   echo "  "
   echo " mobile-install                           Install mobile framework that use at flexurio - base on nativescript"
   echo " mobile-generate                          Generate iOS & Android files "
   echo " mobile-packager                          Run Packager server for mobile react-native"
   echo " mobile-run [type mobile]                 Run flexurio mobile on type that you want ( android / ios )"

   echo " mobile-avd [options]                     Android emulator setup & configurations "
   echo "  "
   echo " ------------------------------------------------------------------------------------------------------------- "
   echo "  "
   echo " DESKTOP OPTIONS : "
   echo "  "
   echo " desktop-enable                           Enable fiture desktop mode on flexurio "
   echo " desktop-run                              run desktop app with development mode. Server at http://localhost:3000 "
   echo " desktop-build                            Build Desktop APP.  "

   echo " Usage: sh flexurio.sh [type:server/mobile]-[options]"
   echo " For more help, see 'sh flexurio.sh --help'"
else
   echo "Usage: sh flexurio.sh [type:server/mobile]-[options]"
   echo "For more help, see 'sh flexurio.sh --help'"
fi
